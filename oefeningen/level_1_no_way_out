# ==== Level 1 – Simple: spin → find opening → drive → blink ====
_time = __import__('time')
sleep_ms = _time.sleep_ms
ticks_ms = _time.ticks_ms
ticks_diff = _time.ticks_diff

try:
    a
except NameError:
    ArduinoAlvik = __import__('arduino_alvik').ArduinoAlvik
    a = ArduinoAlvik(); a.begin()

# ---- Instellingen (voor kleine doos zoals op je foto) ----
OPEN = 40      # cm: wat als 'opening' telt
SAFE = 25      # cm: als kleiner -> stop & terug
EXIT = 110     # cm: 'buiten'
SCAN = 16      # draaisnelheid
SPEED = 22     # rij-snelheid
OK_OPEN = 3    # stabiele open metingen
OK_EXIT = 3
# ---------------------------------------------------------

# ---- LED helpers (kort) ----
def led(r,g,b):
    for fn in ("set_rgb","set_led","rgb"):
        try: getattr(a,fn)(r,g,b); return
        except: pass
def led_scan(): led(0,0,180)
def led_drive(): led(0,180,0)
def led_done(): led(200,200,200)
def led_warn(): led(180,0,0)
def led_off(): led(0,0,0)
def blink_done(n=6,on=150,off=150):
    for _ in range(n): led_done(); sleep_ms(on); led_off(); sleep_ms(off)

# ---- Buttons ----
def _ok_raw():
    for n in ("get_touch_ok","is_ok_pressed","is_check_pressed","button_check","get_ok"):
        try: return bool(getattr(a,n)())
        except: pass
    return False
def _cancel_raw():
    for n in ("get_touch_cancel","is_cancel_pressed","is_cross_pressed","button_cross","get_cancel"):
        try: return bool(getattr(a,n)())
        except: pass
    return False

def wait_ok_released():
    while _ok_raw(): sleep_ms(50)
def wait_ok_pressed():
    while not _ok_raw():
        led_scan()
        try: a.brake()
        except: pass
        sleep_ms(80)
def pause_until_ok():
    while not _ok_raw():
        led_scan(); sleep_ms(80)
    led_drive(); sleep_ms(100)

# ---- Motor + afstand ----
def stop():
    led_warn()
    try: a.set_wheels_speed(0,0); a.brake()
    except: pass
    sleep_ms(100)

def set_spd(l,r):
    try: a.set_wheels_speed(l,r)
    except: pass

def dist():
    try:
        _,CL,C,CR,_ = a.get_distance()
        vals = [int(v)//10 if int(v)>1000 else int(v) for v in (CL,C,CR)]
        vals = [v for v in vals if 2<=v<=400]
        return min(vals) if vals else None
    except:
        return None

# ---- Hoofdlogica ----
def scan_for_opening():
    led_scan()
    set_spd(SCAN,-SCAN)
    ok=0
    while True:
        if _cancel_raw(): stop(); pause_until_ok(); led_scan(); set_spd(SCAN,-SCAN)
        d=dist()
        ok = ok+1 if (d and d>OPEN) else 0
        if ok>=OK_OPEN:
            stop()
            return True
        sleep_ms(20)

def drive_until_exit():
    led_drive()
    set_spd(SPEED,SPEED)
    exit_ok=0
    while True:
        if _cancel_raw(): stop(); pause_until_ok(); led_drive(); set_spd(SPEED,SPEED)
        d=dist()
        if not d: continue
        # te dichtbij -> stop + terug + pivot
        if d<SAFE:
            stop()
            set_spd(-SPEED,-SPEED); sleep_ms(500)
            set_spd(-SCAN,SCAN); sleep_ms(600)
            stop()
            return False
        # buiten?
        if d>EXIT:
            exit_ok+=1
            if exit_ok>=OK_EXIT:
                stop(); blink_done(); return True
        else:
            exit_ok=0
        sleep_ms(20)

# ---- Main loop ----
led_scan()
wait_ok_released(); wait_ok_pressed()

while True:
    while not _cancel_raw():
        if scan_for_opening():
            if drive_until_exit():
                pause_until_ok()
    stop(); pause_until_ok()
